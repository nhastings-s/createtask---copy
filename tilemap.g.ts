// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.dungeon.floorDark0,sprites.dungeon.doorLockedWest,sprites.dungeon.stairSouth,sprites.dungeon.purpleSwitchDown], TileScale.Sixteen);
            case "level3":
            case "level3":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex`10001000050606060606060606060606060606070409090909090909090a0a090a0a0a08040909090a0a0a0a0a090909090909080409090a090a0a090a09090909090a080409090a090a0a090a09090b09090a0804090909090a0a090a09090909090a0804090909090909090a090909090909080409090909090909090a090909090a0804090a0a0a0a09090909090909090a080409090a0909090909090909090a0a0804090a0a0909090909090a090909090804090a0a0909090909090909090909080409090a09090a0a0a0a0a0a0a0a0a080409090a0909090909090909090909030409090a09090909090909090909090302010101010101010101010101010101`, img`
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 . . . . . . . . 2 2 . 2 2 2 2 
2 . . . 2 2 2 2 2 . . . . . . 2 
2 . . 2 . 2 2 . 2 . . . . . 2 2 
2 . . 2 . 2 2 . 2 . . . . . 2 2 
2 . . . . 2 2 . 2 . . . . . 2 2 
2 . . . . . . . 2 . . . . . . 2 
2 . . . . . . . . 2 . . . . 2 2 
2 . 2 2 2 2 . . . . . . . . 2 2 
2 . . 2 . . . . . . . . . 2 2 2 
2 . 2 2 . . . . . . 2 . . . . 2 
2 . 2 2 . . . . . . . . . . . 2 
2 . . 2 . . 2 2 2 2 2 2 2 2 2 2 
2 . . 2 . . . . . . . . . . . . 
2 . . 2 . . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.dungeon.greenOuterSouth0,sprites.dungeon.greenOuterSouthEast,sprites.dungeon.stairWest,sprites.dungeon.greenOuterWest1,sprites.dungeon.greenOuterNorthWest,sprites.dungeon.greenOuterNorth0,sprites.dungeon.greenOuterNorthEast,sprites.dungeon.greenOuterEast0,sprites.dungeon.floorLight0,sprites.dungeon.floorDark2,sprites.dungeon.purpleOuterSouth2], TileScale.Sixteen);
            case "level5":
            case "level5":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex`a0a02020303030303`, img`
2 2 2 2 2 . 2 . . 2 . 2 2 2 2 2 
2 2 2 2 2 . 2 . . 2 . 2 2 2 2 2 
2 2 2 2 2 . . . . . . 2 2 2 2 2 
2 2 2 2 2 . . . . . . 2 2 2 2 2 
2 2 2 2 2 . . 2 . . . 2 2 2 2 2 
2 2 2 2 2 . . 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 . . . . . . 2 2 2 2 2 
2 2 2 2 2 . . . . . . 2 2 2 2 2 
2 2 2 2 2 2 . . 2 . . 2 2 2 2 2 
2 2 2 2 2 . . . 2 . . 2 2 2 2 2 
2 2 2 2 2 . . . 2 . . 2 2 2 2 2 
2 2 2 2 2 . . . 2 . . 2 2 2 2 2 
2 2 2 2 2 . . 2 2 . . 2 2 2 2 2 
2 2 2 2 2 . 2 . . . . 2 2 2 2 2 
2 2 2 2 2 . 2 . . . . 2 2 2 2 2 
2 2 2 2 2 . . . . . . 2 2 2 2 2 
`, [myTiles.transparency16,sprites.castle.tileGrass2,sprites.castle.tilePath5,sprites.builtin.forestTiles0,sprites.castle.tileGrass1,sprites.castle.tileGrass3,sprites.castle.tileDarkGrass3,sprites.castle.tileDarkGrass1,sprites.castle.tileDarkGrass2,sprites.builtin.field1,sprites.builtin.field0], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
